//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMC.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;
    using System.Text.RegularExpressions;

    public partial class Clients: INotifyPropertyChanged, IDataErrorInfo
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Clients()
        {
            this.Requests = new HashSet<Requests>();
        }
    
        public int IDClient { get; set; }
        public string Surname { get; set; }
        public string Name { get; set; }
        public string Patronymic { get; set; }
        public string Telephone { get; set; }
        public bool Type { get; set; }
        public string CompanyName { get; set; }
        public string Email { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Requests> Requests { get; set; }
        public string name
        {
            get { return Name; }
            set
            {
                Name = value;
                OnPropertyChanged("name");
            }
        }
        public string surname
        {
            get { return Surname; }
            set
            {
                Surname = value;
                OnPropertyChanged("surname");
            }
        }
        public string patronymic
        {
            get { return Patronymic; }
            set
            {
                Patronymic = value;
                OnPropertyChanged("patronymic");
            }
        }
        public string telephone
        {
            get { return Telephone; }
            set
            {
                Telephone = value;
                OnPropertyChanged("telephone");
            }
        }
        public string email
        {
            get { return Email; }
            set
            {
                Email = value;
                //OnPropertyChanged("email");
            }
        }

        public string companyname
        {
            get { return CompanyName; }
            set
            {
                CompanyName = value;
                OnPropertyChanged();
            }
        }
        public bool type
        {
            get { return Type; }
            set
            {
                Type = value;
                OnPropertyChanged("type");
            }
        }

        public string this[string columnName]
        {
            get
            {
                string error = String.Empty;
                switch (columnName)
                {

                    case nameof(surname):
                        if (string.IsNullOrWhiteSpace(surname))
                            error = "Поле не может быть пустым";
                        break;
                    case nameof(name):
                        if (string.IsNullOrWhiteSpace(name))
                            error = "Поле не может быть пустым";
                        break;
                    case nameof(telephone):
                        if (string.IsNullOrWhiteSpace(telephone))
                            error = "Поле не может быть пустым";
                        else if (!Regex.IsMatch(telephone, @"\+7\(\d{3}\)\d{3}-\d{2}-\d{2}"))
                            error = "неверный формат номера телефона";
                        break;
                    case nameof(email):

                        if (!string.IsNullOrWhiteSpace(email))
                        {
                            if (!Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                            {
                                error = "Неверный формат почты";
                            }
                        }
                        break;
                    case nameof(companyname):

                        if (type)
                        {
                            if (string.IsNullOrWhiteSpace(companyname))
                            {
                                error = "Поле не может быть пустым для юр.лиц";
                            }
                        }
                        break;
                }
                return error;
            }
        }
        public bool HasValidationErrors()
        {
            return !string.IsNullOrEmpty(this[nameof(surname)]) || !string.IsNullOrEmpty(this[nameof(name)])
                || !string.IsNullOrEmpty(this[nameof(telephone)]) || !string.IsNullOrEmpty(this[nameof(email)])
                || !string.IsNullOrEmpty(this[nameof(companyname)]);
        }
        public string Error
        {
            get { throw new NotImplementedException(); }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        public void OnPropertyChanged([CallerMemberName] string prop = "")
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(prop));
        }
    }
}
