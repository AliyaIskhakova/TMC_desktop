//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMC.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;
    using System.Text.RegularExpressions;

    public partial class Employees: INotifyPropertyChanged, IDataErrorInfo
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Employees()
        {
            this.Requests = new HashSet<Requests>();
        }
    
        public int IdEmployee { get; set; }
        private string surname { get; set; }
        private string name { get; set; }
        private string patronymic { get; set; }
        public int RoleId { get; set; }
        private string telephone { get; set; }
        private string email { get; set; }
        private string login { get; set; }
        private string password { get; set; }
        public virtual Roles Roles { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Requests> Requests { get; set; }
        public string Name
        {
            get { return name; }
            set
            {
                name = value;
                OnPropertyChanged("name");
            }
        }
        public string Surname
        {
            get { return surname; }
            set
            {
                surname = value;
                OnPropertyChanged("surname");
            }
        }
        public string Patronymic
        {
            get { return patronymic; }
            set
            {
                patronymic = value;
                OnPropertyChanged("patronymic");
            }
        }
        public string Telephone
        {
            get { return telephone; }
            set
            {
                telephone = value;
                OnPropertyChanged("telephone");
            }
        }
        public string Login
        {
            get { return login; }
            set
            {
                login = value;
                OnPropertyChanged("login");
            }
        }
        public string Password
        {
            get { return password; }
            set
            {
                password = value;
                OnPropertyChanged("password");
            }
        }
        public string Email
        {
            get { return email; }
            set
            {
                email = value;
                OnPropertyChanged("email");
            }
        }
        public string this[string columnName]
        {
            get
            {
                string error = String.Empty;
                switch (columnName)
                {
                    case nameof(Telephone):
                        if (!Regex.IsMatch(Telephone, @"\+7\(\d{3}\)\d{3}-\d{2}-\d{2}"))
                            error = "Неверный формат номера телефона";
                        break;
                    case nameof(Email):

                        if (!string.IsNullOrWhiteSpace(Email))
                        {
                            if (!Regex.IsMatch(Email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                            {
                                error = "Неверный формат почты";
                            }
                        }
                        break;
                    case nameof(Login):

                        if (!string.IsNullOrWhiteSpace(Login))
                        {
                            if (!Regex.IsMatch(Login, @"^[a-zA-Z][a-zA-Z0-9_\.]+$"))
                            {
                                error = "Неверный формат логина";
                            }
                        }
                        break;
                    case nameof(Surname):

                        if (!string.IsNullOrWhiteSpace(Surname))
                        {
                            if (!Regex.IsMatch(Surname, @"^[A-Za-zА-Яа-яЁё]+(?:[ \-'][A-Za-zА-Яа-яЁё]+)*$"))
                            {
                                error = "Введена некорретная фамилия";
                            }
                        }
                        break;
                    case nameof(Name):

                        if (!string.IsNullOrWhiteSpace(Name))
                        {
                            if (!Regex.IsMatch(Name, @"^[A-Za-zА-Яа-яЁё]+(?:[ \-'][A-Za-zА-Яа-яЁё]+)*$"))
                            {
                                error = "Введено некорретное имя";
                            }
                        }
                        break;
                    case nameof(Patronymic):

                        if (!string.IsNullOrWhiteSpace(Patronymic))
                        {
                            if (!Regex.IsMatch(Patronymic, @"^[A-Za-zА-Яа-яЁё]+$"))
                            {
                                error = "Введено некорретное отчество";
                            }
                        }
                        break;
                }
                return error;
            }
        }
        public bool HasValidationErrors()
        {
            return (!string.IsNullOrEmpty(this[nameof(Telephone)]) || !string.IsNullOrEmpty(this[nameof(Email)]) 
                || !string.IsNullOrEmpty(this[nameof(Login)]) || !string.IsNullOrEmpty(this[nameof(Surname)]) 
                || !string.IsNullOrEmpty(this[nameof(Name)]) || !string.IsNullOrEmpty(this[nameof(Patronymic)]));
        }
        public string Error
        {
            get { throw new NotImplementedException(); }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        public void OnPropertyChanged([CallerMemberName] string prop = "")
        {
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs(prop));
        }
    }
}
